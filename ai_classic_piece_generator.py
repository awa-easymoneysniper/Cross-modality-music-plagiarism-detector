# -*- coding: utf-8 -*-
"""AI classic piece generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZrVm-CpIpvgU0fwin9DD0p6H6ClRCP4V
"""

!pip install --upgrade --quiet pip
!pip install --upgrade --quiet transformers datasets[audio]

!pip show torch torchvision

!pip uninstall -y torchvision
!pip install torchvision==0.20.0 --index-url https://download.pytorch.org/whl/cu124

from transformers import MusicgenForConditionalGeneration

model = MusicgenForConditionalGeneration.from_pretrained("facebook/musicgen-small")

import torch

device = "cuda:0" if torch.cuda.is_available() else "cpu"
model.to(device);

from google.colab import drive
drive.mount('/content/drive')

import os
import torch
import scipy.io.wavfile
from transformers import AutoProcessor, MusicgenForConditionalGeneration

# 创建保存目录
save_dir = "/content/drive/MyDrive/MuseGuard/validation_data"
os.makedirs(save_dir, exist_ok=True)

# 加载模型和处理器
device = "cuda" if torch.cuda.is_available() else "cpu"
processor = AutoProcessor.from_pretrained("facebook/musicgen-small")
model = MusicgenForConditionalGeneration.from_pretrained("facebook/musicgen-small").to(device)

# 采样率和token计算（1 token 约0.02秒）
sampling_rate = model.config.audio_encoder.sampling_rate
seconds_to_tokens = lambda seconds: int(seconds * 50)  # 20秒 -> 1000 tokens

# 作曲家与三档提示
composer_prompts = {
    "Bach": {
        "high": "A complex contrapuntal fugue in the style of Johann Sebastian Bach, Baroque period, featuring harpsichord and organ",
        "medium": "A baroque-inspired piece with intricate counterpoint and rich harmonies",
        "low": "An instrumental work with flowing melodic lines and interweaving textures"
    },
    "Beethoven": {
        "high": "A dramatic symphonic movement in the style of Ludwig van Beethoven, Romantic era, strong dynamic contrasts",
        "medium": "A bold and energetic orchestral work with powerful motifs",
        "low": "An orchestral piece with lively rhythms and bold harmonic shifts"
    },
    "Brahms": {
        "high": "A lush chamber work in the style of Johannes Brahms, Romantic period, warm harmonies and interwoven melodies",
        "medium": "A romantic orchestral piece with rich textures and expressive phrasing",
        "low": "A lyrical instrumental composition with warm harmonies"
    },
    "Cambini": {
        "high": "A classical-era wind quintet in the style of Giuseppe Cambini, light textures and elegant phrasing",
        "medium": "A wind-focused chamber work inspired by late 18th-century classical style",
        "low": "A graceful piece for small ensemble with light textures"
    },
    "Dvorak": {
        "high": "A spirited orchestral dance in the style of Antonín Dvořák, Romantic period, with folk-inspired melodies",
        "medium": "A lively orchestral work with dance rhythms and Slavic melodic inflections",
        "low": "An upbeat folk-inspired instrumental piece"
    },
    "Faure": {
        "high": "A delicate art song arrangement in the style of Gabriel Fauré, late Romantic, with refined harmonies",
        "medium": "A lyrical piano and strings piece with impressionistic touches",
        "low": "A soft instrumental work with gentle harmonic colors"
    },
    "Haydn": {
        "high": "A witty and balanced symphony movement in the style of Joseph Haydn, Classical era, with playful themes",
        "medium": "A classical orchestral piece with clear form and humorous motifs",
        "low": "A light orchestral work with charming melodies"
    },
    "Mozart": {
        "high": "A lively piano concerto in the style of Wolfgang Amadeus Mozart, Classical period, elegant melodies and balanced orchestration",
        "medium": "A bright and elegant classical orchestral piece, inspired by the grace and clarity of late 18th-century Viennese music",
        "low": "A light-hearted orchestral work with playful woodwinds and strings, in a classical mood"
    },
    "Ravel": {
        "high": "A colorful orchestral piece in the style of Maurice Ravel, Impressionist period, with lush harmonies and shimmering textures",
        "medium": "An impressionistic orchestral work with delicate tone colors",
        "low": "A dreamy instrumental piece with soft textures and flowing harmonies"
    },
    "Schubert": {
        "high": "A lyrical lied-style piano and voice arrangement in the style of Franz Schubert, Romantic period, expressive melodies",
        "medium": "A romantic piano piece with song-like phrasing and gentle harmonies",
        "low": "An instrumental piece with flowing melodies and warm harmonic progressions"
    }
}

# 每档生成首数分配
distribution = {"high": 4, "medium": 3, "low": 3}

total = 0

for composer, prompts in composer_prompts.items():
    for level, num_tracks in distribution.items():
        for idx in range(num_tracks):
            prompt = prompts[level]
            print(f"🎶 Generating {composer} - {level} similarity - Track {idx + 1} ...")

            inputs = processor(text=[prompt], return_tensors="pt").to(device)

            # 生成20秒音乐对应tokens数
            max_tokens = seconds_to_tokens(20)

            with torch.no_grad():
                audio = model.generate(**inputs, max_new_tokens=max_tokens)

            audio_np = audio[0, 0].cpu().numpy()  # 取batch第0个，第0声道数据

            # 保存文件
            filename = f"{composer}_{level}_{idx+1}.wav"
            filepath = os.path.join(save_dir, filename)
            scipy.io.wavfile.write(filepath, rate=sampling_rate, data=audio_np)

            total += 1

print(f"\n✅ 完成！总共生成了 {total} 首音乐，保存在：{save_dir}")